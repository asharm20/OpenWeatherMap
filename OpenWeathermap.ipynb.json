{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/ayushsharma/repos\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "import json\n",
    "import os\n",
    "import threading \n",
    "import urllib.request\n",
    "from PIL import Image\n",
    "from multiprocessing import Pool\n",
    "from pymongo import MongoClient\n",
    "from ratelimit import limits, RateLimitException\n",
    "from ratelimit import limits\n",
    "# from config import Location_id\n",
    "# import config\n",
    "\n",
    "\n",
    "# Function to convert the time in numbers to Proper time format\n",
    "\n",
    "def time_converter(time):\n",
    "    converted_time = datetime.datetime.fromtimestamp(\n",
    "        int(time)\n",
    "    ).strftime('%I:%M %p')\n",
    " \n",
    "    return converted_time\n",
    "\n",
    "# Function to build the URL of the API\n",
    "\n",
    "def url_builder(city_id , id_type):\n",
    "    \n",
    "    user_api = '5b49c10853797e6bf98308cb473958cb'  # Obtain yours form: http://openweathermap.org/\n",
    "    unit = 'metric'  # For Fahrenheit use imperial, for Celsius use metric, and the default is Kelvin.\n",
    "    api = 'http://api.openweathermap.org/data/2.5/weather?id='     # Search for your city ID here: http://bulk.openweathermap.org/sample/city.list.json.gz\n",
    "    \n",
    "    if id_type==\"5_days\":\n",
    "    \n",
    "        full_api_url = api + str(city_id) + '&mode=json&units=' + unit + '&APPID=' + user_api\n",
    "    \n",
    "\n",
    "    elif id_type == \"16_days\":\n",
    "    \n",
    "        full_api_url = api + str(city_id) +'&cnt=16'+ '&mode=json&units=' + unit + '&APPID=' + user_api\n",
    "        \n",
    "\n",
    "    return full_api_url\n",
    "\n",
    "# Referesh Rate limiter function\n",
    "# Function to fetch data from the API\n",
    "ONE_MINUTES = 60\n",
    "@limits(calls=5, period=ONE_MINUTES)\n",
    "def data_fetch(full_api_url):\n",
    "    url = urllib.request.urlopen(full_api_url) \n",
    "    output = url.read().decode('utf-8')\n",
    "    raw_api_dict = json.loads(output)\n",
    "    url.close()\n",
    "    \n",
    "    return raw_api_dict\n",
    "    \n",
    "    \n",
    "# Function to store data into Dictionary in form of key_value pair\n",
    "\n",
    "def data_organizer(raw_api_dict):\n",
    "    data = dict(\n",
    "        city=raw_api_dict.get('name'),\n",
    "        country=raw_api_dict.get('sys').get('country'),\n",
    "        temp=raw_api_dict.get('main').get('temp'),\n",
    "        temp_max=raw_api_dict.get('main').get('temp_max'),\n",
    "        temp_min=raw_api_dict.get('main').get('temp_min'),\n",
    "        humidity=raw_api_dict.get('main').get('humidity'),\n",
    "        pressure=raw_api_dict.get('main').get('pressure'),\n",
    "        sky=raw_api_dict['weather'][0]['main'],\n",
    "        sunrise=time_converter(raw_api_dict.get('sys').get('sunrise')),\n",
    "        sunset=time_converter(raw_api_dict.get('sys').get('sunset')),\n",
    "        wind=raw_api_dict.get('wind').get('speed'),\n",
    "        wind_deg=raw_api_dict.get('deg'),\n",
    "        dt=time_converter(raw_api_dict.get('dt')),\n",
    "        cloudiness=raw_api_dict.get('clouds').get('all'),\n",
    "        lat = raw_api_dict.get('coord').get('lat'),\n",
    "        lon = raw_api_dict.get('coord').get('lon')\n",
    "    )\n",
    "    \n",
    "    return data\n",
    "\n",
    "# Stroing Data into five_days collection of weather database Mongodb \n",
    "\n",
    "def db_5():\n",
    "    \n",
    "# Calling the url builder function , data_fetch function to get the url and get raw data and usinf data_organizer function to get the data into dictionary form.\n",
    "\n",
    "    dic = data_organizer(data_fetch(url_builder(2172797,\"5_days\")))\n",
    "\n",
    "#     print(dic)\n",
    "# Connecting to Local Mongodb \n",
    "\n",
    "    client = MongoClient('mongodb://localhost:27017/')\n",
    "    \n",
    "# Using  Database Weather\n",
    "\n",
    "    db = client.weather\n",
    "    \n",
    "# Using  Collection five_days\n",
    "\n",
    "    collection = db.five_days\n",
    "    \n",
    "# Defining the data \n",
    "\n",
    "    record = { \n",
    "            \"Country\":dic['country'],\"City\":dic['city'],\"temp\":dic['temp'],\"temp_max\":dic['temp_max'],\"temp_min\":dic['temp_min'],\n",
    "            \"humidity\":dic['humidity'],\"pressure\":dic['pressure'],\"sky\":dic['sky'],\"sunrise\":dic['sunrise'],\"sunset\":dic['sunset'],\"wind\":dic['wind'],\n",
    "            \"wind_deg\":dic['wind_deg'],\"dt\":dic['dt'],\"cloudiness\":dic['cloudiness'],\"Lon\":dic['lon'],\"Lat\":dic['lat']\n",
    "            } \n",
    "\n",
    "# Inserting record in the DB\n",
    "\n",
    "    rec_id1 = collection.insert(record)\n",
    "\n",
    "\n",
    "# Stroing Data into sixteen_days collection of weather database Mongodb    \n",
    "    \n",
    "def db_16():\n",
    "\n",
    "# Calling the url builder function , data_fetch function to get the url and get raw data and usinf data_organizer function to get the data into dictionary form. \n",
    "\n",
    "    dic = data_organizer(data_fetch(url_builder(2172797,\"16_days\")))\n",
    "    \n",
    "# Connecting to Local Mongodb \n",
    "\n",
    "    client = MongoClient('mongodb://localhost:27017/')\n",
    "\n",
    "# Using Database Weather    \n",
    "\n",
    "    db = client.weather\n",
    "\n",
    "# Using  Collection five_days\n",
    "\n",
    "    collection = db.sixteen_days\n",
    "\n",
    "# Defining the data \n",
    "    \n",
    "    record = { \n",
    "            \"Country\":dic['country'],\"City\":dic['city'],\"temp\":dic['temp'],\"temp_max\":dic['temp_max'],\"temp_min\":dic['temp_min'],\n",
    "            \"humidity\":dic['humidity'],\"pressure\":dic['pressure'],\"sky\":dic['sky'],\"sunrise\":dic['sunrise'],\"sunset\":dic['sunset'],\"wind\":dic['wind'],\n",
    "            \"wind_deg\":dic['wind_deg'],\"dt\":dic['dt'],\"cloudiness\":dic['cloudiness'],\"Lon\":dic['lon'],\"Lat\":dic['lat']\n",
    "            } \n",
    "\n",
    "# Inserting record in the DB\n",
    "\n",
    "    rec_id1 = collection.insert(record)\n",
    "        \n",
    "    \n",
    "if __name__ == '__main__':\n",
    "# Using multithreading to run the process simultaniously    \n",
    "    try:\n",
    "        \n",
    "        t1 = threading.Thread(target=db_5) \n",
    "        t2 = threading.Thread(target=db_16)\n",
    "#       # starting thread 1 \n",
    "        t1.start() \n",
    "        t2.start() \n",
    "#      # wait until thread 1 is completely executed \n",
    "        t1.join() \n",
    "        t2.join() \n",
    "    except IOError:\n",
    "        print('Thread not Working')\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
